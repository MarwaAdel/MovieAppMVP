// Generated by Dagger (https://google.github.io/dagger).
package com.dev.movieapp.dipinject.modules;

import com.dev.movieapp.networking.NetworkService;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;

public final class NetworkModule_ProvidesNetworkServiceFactory implements Factory<NetworkService> {
  private final NetworkModule module;

  private final Provider<Retrofit> retrofitProvider;

  public NetworkModule_ProvidesNetworkServiceFactory(
      NetworkModule module, Provider<Retrofit> retrofitProvider) {
    this.module = module;
    this.retrofitProvider = retrofitProvider;
  }

  @Override
  public NetworkService get() {
    return provideInstance(module, retrofitProvider);
  }

  public static NetworkService provideInstance(
      NetworkModule module, Provider<Retrofit> retrofitProvider) {
    return proxyProvidesNetworkService(module, retrofitProvider.get());
  }

  public static NetworkModule_ProvidesNetworkServiceFactory create(
      NetworkModule module, Provider<Retrofit> retrofitProvider) {
    return new NetworkModule_ProvidesNetworkServiceFactory(module, retrofitProvider);
  }

  public static NetworkService proxyProvidesNetworkService(
      NetworkModule instance, Retrofit retrofit) {
    return Preconditions.checkNotNull(
        instance.providesNetworkService(retrofit),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
