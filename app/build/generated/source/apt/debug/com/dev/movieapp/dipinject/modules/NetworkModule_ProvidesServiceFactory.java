// Generated by Dagger (https://google.github.io/dagger).
package com.dev.movieapp.dipinject.modules;

import com.dev.movieapp.networking.NetworkProcessor;
import com.dev.movieapp.networking.NetworkService;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class NetworkModule_ProvidesServiceFactory implements Factory<NetworkProcessor> {
  private final NetworkModule module;

  private final Provider<NetworkService> networkServiceProvider;

  public NetworkModule_ProvidesServiceFactory(
      NetworkModule module, Provider<NetworkService> networkServiceProvider) {
    this.module = module;
    this.networkServiceProvider = networkServiceProvider;
  }

  @Override
  public NetworkProcessor get() {
    return provideInstance(module, networkServiceProvider);
  }

  public static NetworkProcessor provideInstance(
      NetworkModule module, Provider<NetworkService> networkServiceProvider) {
    return proxyProvidesService(module, networkServiceProvider.get());
  }

  public static NetworkModule_ProvidesServiceFactory create(
      NetworkModule module, Provider<NetworkService> networkServiceProvider) {
    return new NetworkModule_ProvidesServiceFactory(module, networkServiceProvider);
  }

  public static NetworkProcessor proxyProvidesService(
      NetworkModule instance, NetworkService networkService) {
    return Preconditions.checkNotNull(
        instance.providesService(networkService),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
