// Generated by Dagger (https://google.github.io/dagger).
package com.dev.movieapp.dipinject.components;

import com.dev.movieapp.dipinject.modules.ApplicationModule;
import com.dev.movieapp.dipinject.modules.ApplicationModule_GetUtilsFactory;
import com.dev.movieapp.dipinject.modules.ApplicationModule_LoggerFactory;
import com.dev.movieapp.dipinject.modules.NetworkModule;
import com.dev.movieapp.dipinject.modules.NetworkModule_ProvideCallFactory;
import com.dev.movieapp.dipinject.modules.NetworkModule_ProvidesNetworkServiceFactory;
import com.dev.movieapp.dipinject.modules.NetworkModule_ProvidesServiceFactory;
import com.dev.movieapp.networking.NetworkProcessor;
import com.dev.movieapp.networking.NetworkService;
import com.dev.movieapp.ui.activities.landing.ResultListActivity;
import com.dev.movieapp.ui.activities.landing.ResultListActivity_MembersInjector;
import com.dev.movieapp.ui.fragments.detailfrag.ResultDetailFragment;
import com.dev.movieapp.ui.fragments.detailfrag.ResultDetailFragment_MembersInjector;
import com.dev.movieapp.ui.fragments.detailtabfrag.ResultDetailTabFragment;
import com.dev.movieapp.ui.fragments.detailtabfrag.ResultDetailTabFragment_MembersInjector;
import com.dev.movieapp.ui.fragments.splash.SplashFragment;
import com.dev.movieapp.ui.fragments.splash.SplashFragment_MembersInjector;
import com.dev.movieapp.utils.AppLogger;
import com.dev.movieapp.utils.AppUtils;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;

public final class DaggerApplicationComponent implements ApplicationComponent {
  private Provider<Retrofit> provideCallProvider;

  private Provider<NetworkService> providesNetworkServiceProvider;

  private Provider<NetworkProcessor> providesServiceProvider;

  private Provider<AppUtils> getUtilsProvider;

  private Provider<AppLogger> loggerProvider;

  private DaggerApplicationComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.provideCallProvider =
        DoubleCheck.provider(NetworkModule_ProvideCallFactory.create(builder.networkModule));
    this.providesNetworkServiceProvider =
        DoubleCheck.provider(
            NetworkModule_ProvidesNetworkServiceFactory.create(
                builder.networkModule, provideCallProvider));
    this.providesServiceProvider =
        DoubleCheck.provider(
            NetworkModule_ProvidesServiceFactory.create(
                builder.networkModule, providesNetworkServiceProvider));
    this.getUtilsProvider =
        DoubleCheck.provider(ApplicationModule_GetUtilsFactory.create(builder.applicationModule));
    this.loggerProvider =
        DoubleCheck.provider(ApplicationModule_LoggerFactory.create(builder.applicationModule));
  }

  @Override
  public InjectionSubComponent newInjectionComponent() {
    return new InjectionSubComponentImpl();
  }

  public static final class Builder {
    private NetworkModule networkModule;

    private ApplicationModule applicationModule;

    private Builder() {}

    public ApplicationComponent build() {
      if (networkModule == null) {
        throw new IllegalStateException(NetworkModule.class.getCanonicalName() + " must be set");
      }
      if (applicationModule == null) {
        throw new IllegalStateException(
            ApplicationModule.class.getCanonicalName() + " must be set");
      }
      return new DaggerApplicationComponent(this);
    }

    public Builder applicationModule(ApplicationModule applicationModule) {
      this.applicationModule = Preconditions.checkNotNull(applicationModule);
      return this;
    }

    public Builder networkModule(NetworkModule networkModule) {
      this.networkModule = Preconditions.checkNotNull(networkModule);
      return this;
    }
  }

  private final class InjectionSubComponentImpl implements InjectionSubComponent {
    private InjectionSubComponentImpl() {}

    @Override
    public void inject(ResultListActivity activity) {
      injectResultListActivity(activity);
    }

    @Override
    public void inject(ResultDetailFragment fragment) {
      injectResultDetailFragment(fragment);
    }

    @Override
    public void inject(ResultDetailTabFragment fragment) {
      injectResultDetailTabFragment(fragment);
    }

    @Override
    public void inject(SplashFragment fragment) {
      injectSplashFragment(fragment);
    }

    private ResultListActivity injectResultListActivity(ResultListActivity instance) {
      ResultListActivity_MembersInjector.injectMNetworkProcessor(
          instance, DaggerApplicationComponent.this.providesServiceProvider.get());
      ResultListActivity_MembersInjector.injectMAppUtils(
          instance, DaggerApplicationComponent.this.getUtilsProvider.get());
      return instance;
    }

    private ResultDetailFragment injectResultDetailFragment(ResultDetailFragment instance) {
      ResultDetailFragment_MembersInjector.injectMAppUtils(
          instance, DaggerApplicationComponent.this.getUtilsProvider.get());
      return instance;
    }

    private ResultDetailTabFragment injectResultDetailTabFragment(
        ResultDetailTabFragment instance) {
      ResultDetailTabFragment_MembersInjector.injectMAppUtils(
          instance, DaggerApplicationComponent.this.getUtilsProvider.get());
      ResultDetailTabFragment_MembersInjector.injectMAppLogger(
          instance, DaggerApplicationComponent.this.loggerProvider.get());
      return instance;
    }

    private SplashFragment injectSplashFragment(SplashFragment instance) {
      SplashFragment_MembersInjector.injectMAppUtils(
          instance, DaggerApplicationComponent.this.getUtilsProvider.get());
      return instance;
    }
  }
}
