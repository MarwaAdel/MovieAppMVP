// Generated by Dagger (https://google.github.io/dagger).
package com.dev.movieapp.dipinject.modules;

import com.dev.movieapp.utils.AppLogger;
import dagger.internal.Factory;
import dagger.internal.Preconditions;

public final class ApplicationModule_LoggerFactory implements Factory<AppLogger> {
  private final ApplicationModule module;

  public ApplicationModule_LoggerFactory(ApplicationModule module) {
    this.module = module;
  }

  @Override
  public AppLogger get() {
    return provideInstance(module);
  }

  public static AppLogger provideInstance(ApplicationModule module) {
    return proxyLogger(module);
  }

  public static ApplicationModule_LoggerFactory create(ApplicationModule module) {
    return new ApplicationModule_LoggerFactory(module);
  }

  public static AppLogger proxyLogger(ApplicationModule instance) {
    return Preconditions.checkNotNull(
        instance.logger(), "Cannot return null from a non-@Nullable @Provides method");
  }
}
